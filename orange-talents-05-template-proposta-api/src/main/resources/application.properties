#configs de banco de dados
spring.datasource.url= ${PROPOSTA_DB:jdbc:postgresql://localhost:5433/postgres}
spring.datasource.username=postgres
spring.datasource.password=password
spring.jpa.database-platform = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql = true
spring.jpa.properties.javax.persistence.query.timeout = 50
#Dropar ao iniciar por enquanto
spring.jpa.hibernate.ddl-auto=create-drop

#feign configs
feign.client.config.nomeFeignClienteDefinidoNoBean.read-timeout=100
feign.client.config.nomeFeignClienteDefinidoNoBean.connect-timeout=100

#healthcheck - habilitando prometheus pelo micrometer
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.export.prometheus.pushgateway.enabled=true
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:serviço de proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

# Mostrar detalhes do health endpoint
management.endpoint.health.show-details=always

#variaveis de acesso a recursos externos
restricao.host=${RESTRICAO_URL:http://localhost:9999}
cartao.host=${CARTAO_URL:http://localhost:8888}

# variável da porta da API
server.port=${SERVER_PORT:8080}

# configs do spring security para resource server
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/cartoes}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/cartoes/protocol/openid-connect/certs}

#CHAVES EM 16 bytes PLEASE!
encrypt.key.secret=${ENCRYPT_KEY_SECRET:abcdefgh12345678}
encrypt.initial.vector=${ENCRYPT_INITIAL_VECTOR:12345678abcdefgh}